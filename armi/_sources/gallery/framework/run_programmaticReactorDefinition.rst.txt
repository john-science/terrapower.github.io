.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_framework_run_programmaticReactorDefinition.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_gallery_framework_run_programmaticReactorDefinition.py:


Build Reactor Inputs Programmatically
=====================================

Sometimes it's desirable to build input definitions for ARMI using
code rather than by writing the textual input files directly. 
In ARMI you can either make the ARMI reactor objects directly,
or you can define Blueprints objects. The benefit of making Blueprints
objects is that they can in turn be used to create both ARMI reactor
objects as well as textual input itself. This is nice when you want to
have traceable input files associated with a run that was developed
programmatically (e.g. for parameter sweeps). 

This example shows how to make Blueprints objects programmatically completely
from scratch.



.. image:: /gallery/framework/images/sphx_glr_run_programmaticReactorDefinition_001.png
    :alt: Assembly Designs for None
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    =========== Case Information ===========
    [info] ---------------------  ------------------------------------------------------------------------------
           Case Title:            scripted-case
           Case Description:
           Run Type:              Standard - Operator
           Current User:          ntouran
           ARMI Location:         C:\Users\ntouran\codes\armi-framework\armi
           Working Directory:     C:\Users\ntouran\codes\armi-framework\doc\gallery-src\framework
           Python Interpreter:    3.9.0 (tags/v3.9.0:9cf6752, Oct  5 2020, 15:34:40) [MSC v.1927 64 bit (AMD64)]
           Master Machine:        TP010267
           Number of Processors:  1
           Date and Time:         Wed Dec 16 12:39:11 2020
           ---------------------  ------------------------------------------------------------------------------
    =========== Input File Information ===========
    [info] -------------  ------------------  ------------
           Input Type     Path                SHA-1 Hash
           -------------  ------------------  ------------
           Case Settings  scripted-case.yaml  4caf9567c7
           Blueprints                         MISSING
           Geometry                           MISSING
           -------------  ------------------  ------------
    =========== Reactor Cycle Information ===========
    [info] ---------------------------  -------
           Reactor Thermal Power (MW):    0
           Number of Cycles:              1
           Cycle Lengths:               365.242
           Availability Factors:          1
           Power Fractions:               1
           ---------------------------  -------
    =========== Constructing Reactor and Verifying Inputs ===========
    [info] Constructing the `core`
    =========== Adding Assemblies to <Core: core id:2444335363072> ===========
    [info] Will expand CR, FE, MO, NI, SI, ZR, HE, NA, MN, W elementals to have natural isotopics
    [info] Nuclides truncating the burn-chain:  LFP35, LFP40, DUMP1, LFP39, DUMP2, LFP38, LFP41
    [info] Constructing assembly `Fuel`
    [warn] No component matched Flags.WIRE in <reflector BxxxA at ExCore XS: A BU GP: A>. Returning None
    [warn] No component matched Flags.CLAD in <reflector BxxxA at ExCore XS: A BU GP: A>. Returning None
    [info] Constructing assembly `Reflector`
    =========== Verifying Assembly Configurations ===========
    =========== Summarizing Source of Material Data for <Core: core id:2444335363072> ===========
    [info] ---------------  -----------------  ----------------------------
           Material Name    Source Location    Property Data was Modified
                                               from the Source?
           ---------------  -----------------  ----------------------------
           Custom Material  ARMI               False
           HT9              ARMI               False
           Sodium           ARMI               False
           Void             ARMI               False
           ---------------  -----------------  ----------------------------
    =========== Applying Geometry Modifications ===========
    [info] Updating spatial grid pitch data for hex geometry
    =========== Initializing Mesh, Assembly Zones, and Nuclide Categories =========== 
    [warn] The system has no heavy metal and therefore is not a nuclear reactor.
           Please make sure that this is intended and not a input error.
    [info] Nuclide categorization for cross section temperature assignments:
           ------------------  ------------------------------------------------------------
           Nuclide Category    Nuclides
           ------------------  ------------------------------------------------------------
           Fuel                U238, ZR90, HE4, ZR91, ZR92, DUMP1, PU239, NP237, B10,
                               CM243, U234, LFP40, PU236, AM242, U235, CM242, AM243, PU238,
                               U236, CM245, ZR94, LFP39, CM244, DUMP2, CM247, LFP41, CM246,
                               LFP35, AM241, PU242, B11, NP238, PU241, LFP38, PU240, ZR96
           Coolant             NA23
           Structure           V, MO100, SI29, MO92, C, MO98, FE58, SI30,
                               W182, MN55, W183, NI61, W184, CR52, NI62, W186,
                               FE56, CR50, NI58, MO95, FE54, NI64, FE57,
                               MO94, MO97, MO96, CR54, NI60, SI28, CR53
           ------------------  ------------------------------------------------------------
    [info] Assembly zone definitions:
           --------  ------  ------------  -----------------------------------------  ----------  ------
               Zone                                                                     Symmetry  Hot
             Number  Name      Assemblies  Locations                                      Factor  Zone
           --------  ------  ------------  -----------------------------------------  ----------  ------
                  1  ring-1            21  A1001, A2001, A2002, A3001, A3002, A3003,           3  False
                                           A3012, A4001, A4002, A4003, A4004,
                                           A4005, A4018, A5001, A5002, A5003,
                                           A5004, A5005, A5006, A5023, A5024
           --------  ------  ------------  -----------------------------------------  ----------  ------
    [info] The setting `splitZones` is enabled. Building subzones from core zones:
           --------  ------------------  ----------  ------------  --------------------------  ----------  ------
               Zone                      Original                                                Symmetry  Hot
             Number  Name                Name          Assemblies  Locations                       Factor  Zone
           --------  ------------------  ----------  ------------  --------------------------  ----------  ------
                  1  ring-1-Reflector-5  ring-1                 4  A5023, A4018, A3001, A2002           3  False
                  2  ring-1-Fuel-5       ring-1                 3  A3012, A1001, A2001                  3  False
           --------  ------------------  ----------  ------------  --------------------------  ----------  ------
    =========== Interface Stack Summary  ===========
    [info] -------  ------------------------  ---------------  ----------  ---------  -----------  ------------
             Index  Type                      Name             Function    Enabled    EOL order    BOL forced
           -------  ------------------------  ---------------  ----------  ---------  -----------  ------------
                01  Main                      main                         Yes        Reversed     No
                02  FissionProductModel       fissionProducts              Yes        Normal       No
                03  CrossSectionGroupManager  xsGroups                     Yes        Normal       No
                04  HistoryTracker            history                      Yes        Normal       No
                05  Report                    report                       Yes        Normal       No
                06  Database                  database                     Yes        Normal       No
                07  MemoryProfiler            memoryProfiler               Yes        Normal       No
                08  Snapshot                  snapshot                     Yes        Normal       No
           -------  ------------------------  ---------------  ----------  ---------  -----------  ------------
    ===========  Triggering Init Event ===========
    =========== 01 - main                           Init            ===========
    =========== 02 - fissionProducts                Init            ===========
    =========== 03 - xsGroups                       Init            ===========
    =========== 04 - history                        Init            ===========
    =========== 05 - report                         Init            ===========
    =========== 06 - database                       Init            ===========
    =========== 07 - memoryProfiler                 Init            ===========
    =========== 08 - snapshot                       Init            ===========
    ===========  Completed Init Event ===========







|


.. code-block:: default

    import matplotlib.pyplot as plt
    import armi

    armi.configure(permissive=True)
    # pylint: disable=wrong-import-position
    from armi.reactor import blueprints
    from armi.settings import caseSettings
    from armi.reactor.blueprints import isotopicOptions
    from armi.reactor.blueprints import assemblyBlueprint
    from armi.reactor.blueprints import blockBlueprint
    from armi.reactor.blueprints import componentBlueprint
    from armi.reactor.blueprints import gridBlueprint
    from armi.reactor.blueprints import reactorBlueprint
    from armi.utils import plotting
    from armi import cases


    def buildCase():
        """Build input components and a case."""
        bp = blueprints.Blueprints()
        bp.customIsotopics = isotopicOptions.CustomIsotopics()
        bp.nuclideFlags = isotopicOptions.genDefaultNucFlags()

        components = buildComponents()
        bp.blockDesigns = buildBlocks(components)
        bp.assemDesigns = buildAssemblies(bp.blockDesigns)
        bp.gridDesigns = buildGrids()
        bp.systemDesigns = buildSystems()

        cs = caseSettings.Settings()
        cs.path = None
        cs.caseTitle = "scripted-case"
        case = cases.Case(cs=cs, bp=bp)

        return case


    def buildComponents():
        ISOTHERMAL_TEMPERATURE_IN_C = 450.0
        fuel = componentBlueprint.ComponentBlueprint()
        fuel.name = "fuel"
        fuel.shape = "Circle"
        fuel.mult = 217
        fuel.material = "Custom"
        fuel.Tinput = ISOTHERMAL_TEMPERATURE_IN_C
        fuel.Thot = ISOTHERMAL_TEMPERATURE_IN_C
        fuel.id = 0.0
        fuel.od = 0.4

        clad = componentBlueprint.ComponentBlueprint()
        clad.name = "clad"
        clad.mult = "fuel.mult"
        clad.shape = "Circle"
        clad.material = "HT9"
        clad.Tinput = ISOTHERMAL_TEMPERATURE_IN_C
        clad.Thot = ISOTHERMAL_TEMPERATURE_IN_C
        clad.id = 0.508
        clad.od = 0.5842

        gap = componentBlueprint.ComponentBlueprint()
        gap.name = "gap"
        gap.shape = "Circle"
        gap.mult = "fuel.mult"
        gap.material = "Void"
        gap.Tinput = ISOTHERMAL_TEMPERATURE_IN_C
        gap.Thot = ISOTHERMAL_TEMPERATURE_IN_C
        gap.id = "fuel.od"
        gap.od = "clad.id"

        wire = componentBlueprint.ComponentBlueprint()
        wire.name = "wire"
        wire.mult = "fuel.mult"
        wire.shape = "Helix"
        wire.material = "HT9"
        wire.Tinput = ISOTHERMAL_TEMPERATURE_IN_C
        wire.Thot = ISOTHERMAL_TEMPERATURE_IN_C
        wire.id = 0.0
        wire.od = 0.14224
        wire.axialPitch = 30.48
        wire.helixDiameter = 0.72644

        duct = componentBlueprint.ComponentBlueprint()
        duct.name = "duct"
        duct.mult = 1
        duct.shape = "Hexagon"
        duct.material = "HT9"
        duct.Tinput = ISOTHERMAL_TEMPERATURE_IN_C
        duct.Thot = ISOTHERMAL_TEMPERATURE_IN_C
        duct.ip = 11.0109
        duct.op = 11.6205

        intercoolant = componentBlueprint.ComponentBlueprint()
        intercoolant.name = "intercoolant"
        intercoolant.mult = 1
        intercoolant.shape = "Hexagon"
        intercoolant.material = "Sodium"
        intercoolant.Tinput = ISOTHERMAL_TEMPERATURE_IN_C
        intercoolant.Thot = ISOTHERMAL_TEMPERATURE_IN_C
        intercoolant.ip = "duct.op"
        intercoolant.op = 12.01420

        coolant = componentBlueprint.ComponentBlueprint()
        coolant.name = "coolant"
        coolant.shape = "DerivedShape"
        coolant.material = "Sodium"
        coolant.Tinput = ISOTHERMAL_TEMPERATURE_IN_C
        coolant.Thot = ISOTHERMAL_TEMPERATURE_IN_C

        componentBlueprints = {
            c.name: c for c in [fuel, gap, clad, wire, duct, intercoolant, coolant]
        }

        return componentBlueprints


    def buildBlocks(components):
        """Build block blueprints"""
        blocks = blockBlueprint.BlockKeyedList()
        fuel = blockBlueprint.BlockBlueprint()
        fuel.name = "fuel"
        for cname, c in components.items():
            fuel[cname] = c
        blocks[fuel.name] = fuel

        reflector = blockBlueprint.BlockBlueprint()
        reflector.name = "reflector"
        reflector["coolant"] = components["coolant"]
        reflector["duct"] = components["duct"]
        blocks[reflector.name] = reflector

        return blocks


    def buildAssemblies(blockDesigns):
        """Build assembly blueprints"""
        fuelBock, reflectorBlock = blockDesigns["fuel"], blockDesigns["reflector"]

        assemblies = assemblyBlueprint.AssemblyKeyedList()

        fuelAssem = assemblyBlueprint.AssemblyBlueprint()
        fuelAssem.name = "Fuel"
        fuelAssem.specifier = "IC"

        fuelAssem.blocks = blockBlueprint.BlockList()
        fuelAssem.blocks.extend(
            [reflectorBlock, fuelBock, fuelBock, fuelBock, reflectorBlock]
        )
        fuelAssem.height = [10, 20, 20, 20, 10]
        fuelAssem.xsTypes = ["A"] * 5
        fuelAssem.axialMeshPoints = [1] * 5

        assemblies[fuelAssem.name] = fuelAssem

        reflectorAssem = assemblyBlueprint.AssemblyBlueprint()
        reflectorAssem.name = "Reflector"
        reflectorAssem.specifier = "RR"
        reflectorAssem.blocks = blockBlueprint.BlockList()
        reflectorAssem.blocks.extend([reflectorBlock] * 5)
        reflectorAssem.height = [10, 20, 20, 20, 10]
        reflectorAssem.xsTypes = ["A"] * 5
        reflectorAssem.axialMeshPoints = [1] * 5
        assemblies[reflectorAssem.name] = reflectorAssem

        return assemblies


    def buildGrids():
        """Build the core map grid"""

        coreGrid = gridBlueprint.GridBlueprint("core")
        coreGrid.geom = "hex"
        coreGrid.symmetry = "third periodic"
        coreGrid.origin = gridBlueprint.Triplet()

        coreGrid.latticeMap = """
             RR   RR
               IC   RR
             IC   IC   RR"""

        grids = gridBlueprint.Grids()
        grids["core"] = coreGrid
        return grids


    def buildSystems():
        """Build the core system"""
        systems = reactorBlueprint.Systems()
        core = reactorBlueprint.SystemBlueprint("core", "core", gridBlueprint.Triplet())
        systems["core"] = core
        return systems


    if __name__ == "__main__":
        case = buildCase()
        # build ARMI objects
        o = case.initializeOperator()
        fig = plotting.plotAssemblyTypes(
            case.bp,
            None,
            showBlockAxMesh=True,
        )
        plt.show()

        # also write input files
        case.writeInputs()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.516 seconds)


.. _sphx_glr_download_gallery_framework_run_programmaticReactorDefinition.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: run_programmaticReactorDefinition.py <run_programmaticReactorDefinition.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: run_programmaticReactorDefinition.ipynb <run_programmaticReactorDefinition.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
